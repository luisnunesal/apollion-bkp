process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
  throw err;
});

import fs from 'fs';

import chalk from 'react-dev-utils/chalk';
import checkRequiredFiles from 'react-dev-utils/checkRequiredFiles';
import { choosePort, createCompiler, prepareProxy, prepareUrls } from 'react-dev-utils/WebpackDevServerUtils';
import merge from 'deepmerge';
import webpack, { Configuration } from 'webpack';
import WebpackDevServer from 'webpack-dev-server';

import { getEnviroment } from '../config/env';
import defaultPaths, { AppPaths } from '../config/paths';
import { CustomConfigType, defaultDevConfig } from '../config/shared';
import configFactory from '../config/webpack.config';
import createDevServerConfig from '../config/webpackDevServer.config';

export async function createDevServer(paths: AppPaths, userConfig: CustomConfigType = defaultDevConfig) {
  const useCustomConfig = fs.existsSync(paths.appCustomConfig);

  const { configureWebpack, ...customConfig }: CustomConfigType = useCustomConfig
    ? merge.all([defaultDevConfig, userConfig, require(paths.appCustomConfig) ?? {}])
    : Object.assign(defaultDevConfig, userConfig);

  const { port: devPort, host: devHost, ...devOptions } = customConfig;
  // We attempt to use the default port but if it is busy, we offer the user to
  // run on a different port. `choosePort()` Promise resolves to the next free port.
  const PORT = await choosePort(devHost, devPort);

  if (PORT == null) {
    // We have not found a port.
    return;
  }

  try {
    // Warn and crash if required files are missing
    if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
      process.exit(1);
    }

    const baseConfig = configFactory('development', paths, devOptions) as Configuration;

    const config =
      configureWebpack && typeof configureWebpack === 'function'
        ? configureWebpack(baseConfig, 'development')
        : baseConfig;

    const tscCompileOnError = process.env.TSC_COMPILE_ON_ERROR === 'true';
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const urls = prepareUrls(protocol, devHost, PORT, paths.publicUrlOrPath.slice(0, -1));

    const devSocket = {
      warnings: (warnings) =>
        // eslint-disable-next-line no-use-before-define
        devServer.sockWrite(devServer.sockets, 'warnings', warnings),
      errors: (errors) =>
        // eslint-disable-next-line no-use-before-define
        devServer.sockWrite(devServer.sockets, 'errors', errors),
    };

    const appName = require(paths.appPackageJson).name;
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler({
      appName,
      config,
      devSocket,
      urls,
      useYarn: true,
      useTypeScript: true,
      tscCompileOnError,
      webpack,
    });

    // Load proxy config
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic, paths.publicUrlOrPath);
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(proxyConfig, urls.lanUrlForConfig, paths);
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(PORT, devHost, (err) => {
      if (err) {
        return console.log(err);
      }

      if (useCustomConfig) {
        console.log(`${chalk.cyan('Using custom config from:')} ${chalk.yellow(paths.appCustomConfig)}\n`);
      }

      console.log(chalk.cyan('Starting the development server...\n'));
    });

    ['SIGINT', 'SIGTERM'].forEach((sig) => {
      process.on(sig, () => {
        devServer.close();
        process.exit();
      });
    });
  } catch (err) {
    if (err && err.message) {
      console.log(err.message);
    }

    process.exit(1);
  }
}

if (require.main === module) {
  getEnviroment(defaultPaths);
  createDevServer(defaultPaths);
}
